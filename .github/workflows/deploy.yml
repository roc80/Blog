name: Deploy Blog to Server

on:
  push:
    branches:
      - master # 当推送到 'master' 分支时触发

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 虚拟机上运行

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # 检出仓库代码

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24' # 确保 Node.js 版本与你的项目兼容

      - name: Install dependencies
        run: npm install # 安装项目依赖

      - name: Build Blog
        run: npm run build # 执行 Astro 构建命令

      # --- 添加这个步骤来检查 dist/ 目录内容（调试用，部署成功后可移除） ---
      - name: List built files in dist/
        run: |
          echo "Listing contents of ${{ github.workspace }}/dist/"
          ls -alR ${{ github.workspace }}/dist/
        # 确认此步骤输出的文件列表是否包含你期望部署的静态文件

      - name: Deploy via Rsync
        uses: appleboy/ssh-action@master # 使用 SSH Action 来执行 rsync 命令
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          capture_stdout: true # 捕获 script 块的输出并显示在 Actions 日志中
          script: |
            # 这里的脚本内容必须有正确的缩进，通常是两个空格
            # 且不能有多余的缩进，否则 YAML 会解析错误
            set -x 
            
            SOURCE_DIR="${{ github.workspace }}/dist/"
            REMOTE_PATH="/www/wwwroot/rocli.cn/" # 你的实际项目根目录路径

            echo "远程目标路径: $REMOTE_PATH"
            echo "本地源路径: $SOURCE_DIR"

            ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p $REMOTE_PATH"
            echo "远程目标路径已确认或创建。"

            ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "command -v rsync || { echo 'rsync not found on remote server. Please install it with: sudo yum install rsync'; exit 1; }"
            echo "远程服务器上的 rsync 命令已确认存在。"

            rsync -avz --delete --exclude=".user.ini" "$SOURCE_DIR" "${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:$REMOTE_PATH/"
            
            if [ $? -eq 0 ]; then
              echo "Rsync 命令执行成功。"
            else
              echo "Rsync 命令执行失败。"
              exit 1
            fi

            echo "Deployment completed successfully using Rsync!"